AWSTemplateFormatVersion: 2010-09-09
Description: API gateway and Lambda setup

Parameters:
  JarFileBucket:
    Type: String
  JarFileKey:
    Type: String
  ElasticSearchSecurityGroup:
    Type: String
  LogstashSecurityGroup:
    Type: String
  BastionSecurityGroup:
    Type: String
  IndexName:
    Type: String
    Default: 'plans'
  ElasticSearchDomainEndpoint:
    Type: String
    Default: 'vpc-api-gateway-plans-goi2vse4zllq7m7hp7dzpm6ejm.us-west-2.es.amazonaws.com'
  PrivateSubnet1:
    Type: String
  PrivateSubnet2:
    Type: String
Resources:
  LambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonESReadOnlyAccess'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
  FindByPlanNamePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref FindByPlanName
      SourceArn: !Sub
        - 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/*/GET/plans/*'
        - ApiId: !Ref ServerlessRestApi

  FindBySponsorNamePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref FindBySponsorName
      SourceArn: !Sub
        - 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/*/GET/plans/*'
        - ApiId: !Ref ServerlessRestApi

  FindBySponsorStatePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref FindBySponsorState
      SourceArn: !Sub
        - 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/*/GET/plans/*'
        - ApiId: !Ref ServerlessRestApi

  FindBySponsorName:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref JarFileBucket
        S3Key: !Ref JarFileKey
      MemorySize: 1024
      Environment:
        Variables:
          ES_PROTOCOL: https
          ES_PORT: 443
          INDEX_NAME: !Ref IndexName
          ES_HOST: !Ref ElasticSearchDomainEndpoint
      Handler: 'pro.anuj.challenge.pc.api.SponsorNameSearchHandler::handleRequest'
      Role: !GetAtt 'LambdaIAMRole.Arn'
      Timeout: 20
      Runtime: java8
      VpcConfig:
        SecurityGroupIds:
          - !Ref ElasticSearchSecurityGroup
          - !Ref LogstashSecurityGroup
          - !Ref BastionSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

  FindBySponsorState:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref JarFileBucket
        S3Key: !Ref JarFileKey
      MemorySize: 1024
      Environment:
        Variables:
          ES_PROTOCOL: https
          ES_PORT: 443
          INDEX_NAME: !Ref IndexName
          ES_HOST: !Ref ElasticSearchDomainEndpoint
      Handler: 'pro.anuj.challenge.pc.api.SponsorStateSearchHandler::handleRequest'
      Role: !GetAtt 'LambdaIAMRole.Arn'
      Timeout: 20
      Runtime: java8
      VpcConfig:
        SecurityGroupIds:
          - !Ref ElasticSearchSecurityGroup
          - !Ref LogstashSecurityGroup
          - !Ref BastionSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

  FindByPlanName:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref JarFileBucket
        S3Key: !Ref JarFileKey
      MemorySize: 1024
      Environment:
        Variables:
          ES_PROTOCOL: https
          ES_PORT: 443
          INDEX_NAME: !Ref IndexName
          ES_HOST: >-
            vpc-api-gateway-!Ref IndexName-goi2vse4zllq7m7hp7dzpm6ejm.us-west-2.es.amazonaws.com
      Handler: 'pro.anuj.challenge.pc.api.PlanNameSearchHandler::handleRequest'
      Role: !GetAtt 'LambdaIAMRole.Arn'
      Timeout: 20
      Runtime: java8
      VpcConfig:
        SecurityGroupIds:
          - !Ref ElasticSearchSecurityGroup
          - !Ref LogstashSecurityGroup
          - !Ref BastionSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

  ServerlessRestApiProdStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ServerlessRestApiDeploymente78d61bc66
      RestApiId: !Ref ServerlessRestApi
      StageName: Prod

  ServerlessRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Body:
        info:
          version: '1.0'
          title: !Ref 'AWS::StackName'
        paths:
          /plans/findBySponsorState:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub
                  - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Arn}/invocations'
                  - Arn: !GetAtt 'FindBySponsorState.Arn'
              responses: {}
          /plans/findByPlanName:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub
                  - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Arn}/invocations'
                  - Arn: !GetAtt 'FindByPlanName.Arn'
              responses: {}
          /plans/findBySponsorName:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub
                  - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Arn}/invocations'
                  - Arn: !GetAtt 'FindBySponsorName.Arn'
              responses: {}
        swagger: '2.0'
  ServerlessRestApiDeploymente78d61bc66:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref ServerlessRestApi
      StageName: Stage

Outputs:
  FindByPlanNameFunction:
    Value: !GetAtt 'FindByPlanName.Arn'
  FindBySponsorNameFunction:
    Value: !GetAtt 'FindBySponsorName.Arn'
  Api:
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod'
  FindBySponsorStateFunction:
    Value: !GetAtt 'FindBySponsorState.Arn'
